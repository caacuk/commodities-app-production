{"version":3,"sources":["components/Navbar.jsx","components/CommodityFunctions.js","components/Commodities.jsx","components/AdminCommodities.jsx","components/SurveyorCommodities.jsx","components/UserFunctions.js","components/Login.jsx","components/Register.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Navbar","state","handleItemClick","e","name","localStorage","setItem","logout","removeItem","props","history","push","Menu","pointing","secondary","size","role_id","to","Item","as","active","activeItem","onClick","this","position","usertoken","Component","axios","defaults","baseURL","postCommodity","commodity","post","price","status","date","headers","Authorization","then","response","data","catch","err","postCommodityUpdate","id","console","log","deleteCommodity","commodityId","Commodities","commodities","loading","get","res","setState","getCommodityData","Segment","basic","Header","Dimmer","inverted","Loader","Table","celled","Row","HeaderCell","width","Body","map","d","i","key","Cell","toString","replace","AdminCommodities","loadingButton","openModal","handleChangeStatus","statusUpdate","updateCommodity","handleDeleteComodity","deleteCommodityData","Button","icon","positive","negative","SurveyorCommodities","message","messageType","onChange","target","value","onSubmit","messageError","newCommodity","Message","success","header","content","hidden","Form","Field","Input","placeholder","type","fluid","required","register","newUser","username","password","login","user","Login","decoded","jwt_decode","Register","App","Grid","columns","stretched","Column","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.f9f503c3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Menu } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Navbar extends Component {\r\n  state = {};\r\n\r\n  handleItemClick = (e, { name }) => {\r\n    localStorage.setItem(\"activeItem\", name);\r\n  };\r\n\r\n  logout = () => {\r\n    localStorage.removeItem(\"usertoken\");\r\n    localStorage.removeItem(\"role_id\");\r\n    this.props.history.push(`/login`);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Menu pointing secondary size=\"massive\">\r\n        {localStorage.role_id === \"1\" ? (\r\n          <Link to=\"/admin\">\r\n            <Menu.Item\r\n              as=\"h3\"\r\n              name=\"admin\"\r\n              active={localStorage.activeItem === \"admin\"}\r\n              onClick={this.handleItemClick}\r\n            />\r\n          </Link>\r\n        ) : localStorage.role_id === \"2\" ? (\r\n          <Link to=\"/surveyor\">\r\n            <Menu.Item\r\n              as=\"h3\"\r\n              name=\"surveyor\"\r\n              active={localStorage.activeItem === \"surveyor\"}\r\n              onClick={this.handleItemClick}\r\n            />\r\n          </Link>\r\n        ) : (\r\n          <Link to=\"/home\">\r\n            <Menu.Item\r\n              as=\"h3\"\r\n              name=\"home\"\r\n              active={localStorage.activeItem === \"home\"}\r\n              onClick={this.handleItemClick}\r\n            />\r\n          </Link>\r\n        )}\r\n\r\n        <Menu.Menu position=\"right\">\r\n          {localStorage.usertoken ? (\r\n            <Menu.Item\r\n              name=\"logout\"\r\n              active={localStorage.activeItem === \"logout\"}\r\n              onClick={this.logout}\r\n            />\r\n          ) : (\r\n            <Link to=\"/login\">\r\n              <Menu.Item\r\n                as=\"h3\"\r\n                name=\"login\"\r\n                active={localStorage.activeItem === \"login\"}\r\n                onClick={this.handleItemClick}\r\n              />\r\n            </Link>\r\n          )}\r\n        </Menu.Menu>\r\n      </Menu>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import axios from \"axios\";\r\n\r\naxios.defaults.baseURL = \"https://caacuk-survey-api.herokuapp.com/\";\r\n\r\nexport const getCommoditiesByStatus = () => {\r\n  return axios\r\n    .get(\"commodities/status/1\")\r\n    .then((response) => {\r\n      return response.data;\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n};\r\n\r\nexport const getCommodities = () => {\r\n  return axios\r\n    .get(\"commodities/\", {\r\n      headers: {\r\n        Authorization: localStorage.usertoken, //the token is a variable which holds the token\r\n      },\r\n    })\r\n    .then((response) => {\r\n      return response.data;\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n};\r\n\r\nexport const postCommodity = (commodity) => {\r\n  return axios\r\n    .post(\r\n      \"commodities/insert\",\r\n      {\r\n        name: commodity.name,\r\n        price: commodity.price,\r\n        status: 0,\r\n        date: commodity.date,\r\n      },\r\n      {\r\n        headers: {\r\n          Authorization: localStorage.usertoken,\r\n        },\r\n      }\r\n    )\r\n    .then((response) => {\r\n      // console.log(response);\r\n      return response.data;\r\n    })\r\n    .catch((err) => {\r\n      // console.log(err);\r\n      return \"error\";\r\n    });\r\n};\r\n\r\nexport const postCommodityUpdate = (commodity) => {\r\n  return axios\r\n    .post(\r\n      \"commodities/update\",\r\n      {\r\n        id: commodity.id,\r\n        name: commodity.name,\r\n        price: commodity.price,\r\n        status: commodity.status,\r\n        date: commodity.date,\r\n      },\r\n      {\r\n        headers: {\r\n          Authorization: localStorage.usertoken,\r\n        },\r\n      }\r\n    )\r\n    .then((response) => {\r\n      // console.log(response);\r\n      return response.data;\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n};\r\n\r\nexport const deleteCommodity = (commodity) => {\r\n  const commodityId = commodity.id;\r\n  return axios\r\n    .post(\r\n      \"commodities/delete/\" + commodityId,\r\n      {},\r\n      {\r\n        headers: {\r\n          Authorization: localStorage.usertoken,\r\n        },\r\n      }\r\n    )\r\n    .then((response) => {\r\n      return response.data;\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      return \"error\";\r\n    });\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { Segment, Table, Header, Dimmer, Loader } from \"semantic-ui-react\";\r\n\r\n// GET request function\r\nimport { getCommoditiesByStatus } from \"./CommodityFunctions\";\r\n\r\nclass Commodities extends Component {\r\n  state = {\r\n    commodities: [\r\n      //   { no: 1, name: \"a\", price: 500000, date: \"ini date\", status: 1 },\r\n    ],\r\n    loading: true,\r\n  };\r\n\r\n  // Get commodities\r\n  getCommodityData() {\r\n    getCommoditiesByStatus().then((res) => {\r\n      this.setState({ commodities: res });\r\n      this.setState({ loading: false });\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    localStorage.setItem(\"activeItem\", \"home\");\r\n    this.getCommodityData();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Segment>\r\n        <Segment basic>\r\n          <Header size=\"large\">Commodities</Header>\r\n        </Segment>\r\n        <Segment>\r\n          {/* Loading */}\r\n          <Dimmer active={this.state.loading} inverted>\r\n            <Loader>Loading</Loader>\r\n          </Dimmer>\r\n\r\n          {/* Table of commodities */}\r\n          <Table celled>\r\n            <Table.Header>\r\n              <Table.Row>\r\n                {/* <Table.HeaderCell width=\"1\">No</Table.HeaderCell> */}\r\n                <Table.HeaderCell width=\"5\">Commodity Name</Table.HeaderCell>\r\n                <Table.HeaderCell width=\"5\">Price</Table.HeaderCell>\r\n                <Table.HeaderCell width=\"5\">Date</Table.HeaderCell>\r\n              </Table.Row>\r\n            </Table.Header>\r\n\r\n            <Table.Body>\r\n              {this.state.commodities\r\n                ? this.state.commodities.map((d, i) => (\r\n                    <Table.Row key={`${d.id}-${i}`}>\r\n                      {/* <Table.Cell>{i + 1}</Table.Cell> */}\r\n                      <Table.Cell>{d.name}</Table.Cell>\r\n                      <Table.Cell>\r\n                        Rp.{\" \"}\r\n                        {d.price\r\n                          .toString()\r\n                          .replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, \"$1,\")}\r\n                      </Table.Cell>\r\n                      <Table.Cell>{d.date}</Table.Cell>\r\n                    </Table.Row>\r\n                  ))\r\n                : \"loading\"}\r\n            </Table.Body>\r\n          </Table>\r\n        </Segment>\r\n      </Segment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Commodities;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Table,\r\n  Button,\r\n  Segment,\r\n  Header,\r\n  Dimmer,\r\n  Loader,\r\n} from \"semantic-ui-react\";\r\n\r\n// API request function\r\nimport { getCommodities } from \"./CommodityFunctions\";\r\nimport { postCommodityUpdate } from \"./CommodityFunctions\";\r\nimport { deleteCommodity } from \"./CommodityFunctions\";\r\n\r\nclass AdminCommodities extends Component {\r\n  state = {\r\n    commodities: [\r\n      //   { no: 1, name: \"a\", price: 500000, date: \"ini date\", status: 1 },\r\n    ],\r\n    loading: true,\r\n    loadingButton: false,\r\n    openModal: false,\r\n  };\r\n\r\n  // Call GET request commodities\r\n  getCommodityData() {\r\n    getCommodities().then((res) => {\r\n      this.setState({ commodities: res });\r\n      this.setState({ loading: false });\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (localStorage.role_id !== \"1\") {\r\n      return this.props.history.push(`/`);\r\n    }\r\n\r\n    localStorage.setItem(\"activeItem\", \"admin\");\r\n    this.getCommodityData();\r\n  }\r\n\r\n  // Button status clicked\r\n  handleChangeStatus = (d) => {\r\n    this.setState({ loadingButton: true });\r\n\r\n    let statusUpdate = d.status;\r\n    if (statusUpdate === 1) {\r\n      statusUpdate = 0;\r\n    } else {\r\n      statusUpdate = 1;\r\n    }\r\n\r\n    // Commodity update data\r\n    const updateCommodity = {\r\n      id: d.id,\r\n      status: statusUpdate,\r\n    };\r\n\r\n    // Call POST request for update status commodity\r\n    postCommodityUpdate(updateCommodity).then((res) => {\r\n      this.getCommodityData();\r\n      this.setState({ loadingButton: false });\r\n    });\r\n  };\r\n\r\n  // Button delete clicked\r\n  handleDeleteComodity = (d) => {\r\n    this.setState({ loadingButton: true });\r\n\r\n    // Commodity data\r\n    const deleteCommodityData = {\r\n      id: d.id,\r\n    };\r\n\r\n    // Call POST request for delete commodity\r\n    deleteCommodity(deleteCommodityData).then((res) => {\r\n      this.getCommodityData();\r\n      this.setState({ loadingButton: false });\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Segment>\r\n        <Segment basic>\r\n          <Header size=\"large\">Admin</Header>\r\n        </Segment>\r\n        <Segment>\r\n          {/* Loading */}\r\n          <Dimmer active={this.state.loading} inverted>\r\n            <Loader>Loading</Loader>\r\n          </Dimmer>\r\n\r\n          {/* Table of commodities */}\r\n          <Table celled>\r\n            <Table.Header>\r\n              <Table.Row>\r\n                <Table.HeaderCell width=\"5\">Name</Table.HeaderCell>\r\n                <Table.HeaderCell width=\"5\">Price</Table.HeaderCell>\r\n                <Table.HeaderCell width=\"5\">Date</Table.HeaderCell>\r\n                <Table.HeaderCell width=\"5\">Status</Table.HeaderCell>\r\n              </Table.Row>\r\n            </Table.Header>\r\n\r\n            <Table.Body>\r\n              {this.state.commodities\r\n                ? this.state.commodities.map((d, i) => (\r\n                    <Table.Row key={`${d.id}-${i}`}>\r\n                      {/* Name */}\r\n                      <Table.Cell>{d.name}</Table.Cell>\r\n\r\n                      {/* Price */}\r\n                      <Table.Cell>\r\n                        Rp.{\" \"}\r\n                        {d.price\r\n                          .toString()\r\n                          .replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, \"$1,\")}\r\n                      </Table.Cell>\r\n                      <Table.Cell>{d.date}</Table.Cell>\r\n\r\n                      {/* Status */}\r\n                      <Table.Cell>\r\n                        <Button\r\n                          icon=\"checkmark\"\r\n                          positive={d.status === 1}\r\n                          loading={this.state.loadingButton}\r\n                          key={d.id}\r\n                          onClick={() => this.handleChangeStatus(d)}\r\n                        ></Button>\r\n                      </Table.Cell>\r\n\r\n                      {/* Delete Button */}\r\n                      <Table.Cell>\r\n                        <Button\r\n                          icon=\"close\"\r\n                          negative\r\n                          key={d.id}\r\n                          onClick={() => this.handleDeleteComodity(d)}\r\n                        ></Button>\r\n                      </Table.Cell>\r\n                    </Table.Row>\r\n                  ))\r\n                : \"loading\"}\r\n            </Table.Body>\r\n          </Table>\r\n        </Segment>\r\n      </Segment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AdminCommodities;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Input,\r\n  Form,\r\n  Button,\r\n  Segment,\r\n  Header,\r\n  Message,\r\n  Dimmer,\r\n  Loader,\r\n} from \"semantic-ui-react\";\r\n\r\n// POST request function\r\nimport { postCommodity } from \"./CommodityFunctions\";\r\n\r\nclass SurveyorCommodities extends Component {\r\n  state = {\r\n    name: \"\",\r\n    price: \"\",\r\n    date: \"\",\r\n    loading: false,\r\n    message: true,\r\n    messageType: false,\r\n  };\r\n\r\n  // Set state when input change\r\n  onChange = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  // Button submit\r\n  onSubmit = (e) => {\r\n    if (this.state.name !== \"\") {\r\n      // Set loading and message\r\n      this.setState({ message: true });\r\n      this.setState({ loading: true });\r\n      this.setState({ messageError: false });\r\n\r\n      // New commodity data\r\n      const newCommodity = {\r\n        name: this.state.name,\r\n        price: this.state.price,\r\n        date: this.state.date,\r\n      };\r\n\r\n      // Call POST request for insert commodity\r\n      postCommodity(newCommodity)\r\n        .then((res) => {\r\n          if (res === \"error\") {\r\n            this.setState({ messageError: true });\r\n          }\r\n\r\n          // Set loading and message\r\n          this.setState({ message: false });\r\n          this.setState({ loading: false });\r\n\r\n          this.setState({ name: \"\" });\r\n          this.setState({ price: \"\" });\r\n          this.setState({ date: \"\" });\r\n\r\n          // Redirect\r\n          this.props.history.push(`/surveyor`);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    // Check role user, only surveyor (role_id = 2) can access this page\r\n    if (localStorage.role_id !== \"2\") {\r\n      this.props.history.push(`/`);\r\n    }\r\n\r\n    localStorage.setItem(\"activeItem\", \"surveyor\");\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Segment>\r\n        {/* Error message or success message */}\r\n        <Message\r\n          success={this.state.messageError ? false : true}\r\n          negative={this.state.messageError ? true : false}\r\n          header={this.state.messageError ? \"Error\" : \"Success\"}\r\n          content={\r\n            this.state.messageError\r\n              ? \"Failed submit\"\r\n              : \"Your data has been submited\"\r\n          }\r\n          hidden={this.state.message}\r\n        />\r\n        <Segment basic>\r\n          <Header size=\"large\">Surveyor</Header>\r\n        </Segment>\r\n\r\n        <Segment>\r\n          {/* Loading while send post request */}\r\n          <Dimmer active={this.state.loading} inverted>\r\n            <Loader>Loading</Loader>\r\n          </Dimmer>\r\n\r\n          {/* Form surveyor */}\r\n          <Form>\r\n            <Form.Field>\r\n              <label>Commodity Name</label>\r\n              <Input\r\n                onChange={this.onChange}\r\n                value={this.state.name}\r\n                placeholder=\"Commodity Name\"\r\n                name=\"name\"\r\n                type=\"text\"\r\n                fluid\r\n                required\r\n              />\r\n            </Form.Field>\r\n            <Form.Field>\r\n              <label>Price</label>\r\n              <Input\r\n                onChange={this.onChange}\r\n                value={this.state.price}\r\n                placeholder=\"Price\"\r\n                name=\"price\"\r\n                type=\"text\"\r\n                fluid\r\n                required\r\n              />\r\n            </Form.Field>\r\n            <Form.Field>\r\n              <label>Date</label>\r\n              <Input\r\n                onChange={this.onChange}\r\n                value={this.state.date}\r\n                type=\"date\"\r\n                name=\"date\"\r\n                fluid\r\n                required\r\n              />\r\n            </Form.Field>\r\n            <Button type=\"submit\" onClick={this.onSubmit}>\r\n              Submit\r\n            </Button>\r\n          </Form>\r\n        </Segment>\r\n      </Segment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SurveyorCommodities;\r\n","import axios from \"axios\";\r\n\r\naxios.defaults.baseURL = \"https://caacuk-survey-api.herokuapp.com/\";\r\n\r\nexport const register = (newUser) => {\r\n  return axios\r\n    .post(\"users/register\", {\r\n      role_id: newUser.role_id,\r\n      name: newUser.name,\r\n      username: newUser.username,\r\n      password: newUser.password,\r\n    })\r\n    .then((response) => {\r\n      console.log(\"Registered\");\r\n    });\r\n};\r\n\r\nexport const login = (user) => {\r\n  return axios\r\n    .post(\"users/login\", {\r\n      username: user.username,\r\n      password: user.password,\r\n    })\r\n    .then((response) => {\r\n      localStorage.setItem(\"usertoken\", response.data);\r\n      return response.data;\r\n    })\r\n    .catch((err) => {\r\n      // console.log(\"error\");\r\n      return \"error\";\r\n    });\r\n};\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Input,\r\n  Form,\r\n  Button,\r\n  Segment,\r\n  Header,\r\n  Dimmer,\r\n  Loader,\r\n  Message,\r\n} from \"semantic-ui-react\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\n// POST request function\r\nimport { login } from \"./UserFunctions\";\r\n\r\nclass Login extends Component {\r\n  state = { username: \"\", password: \"\", loading: false, message: true };\r\n\r\n  // Set state when input change\r\n  onChange = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  // Button submit\r\n  onSubmit = (e) => {\r\n    this.setState({ loading: true });\r\n    this.setState({ message: true });\r\n    // Check input\r\n    if (this.state.name !== \"\") {\r\n      const user = {\r\n        username: this.state.username,\r\n        password: this.state.password,\r\n      };\r\n\r\n      // Call POST request for login\r\n      login(user)\r\n        .then((res) => {\r\n          if (res !== \"error\") {\r\n            const decoded = jwt_decode(localStorage.usertoken);\r\n            localStorage.setItem(\"role_id\", decoded.role_id);\r\n\r\n            // Redirect to admin or surveyor page\r\n            if (localStorage.role_id === \"1\") {\r\n              localStorage.setItem(\"activeItem\", \"admin\");\r\n              this.props.history.push(`/admin`);\r\n            } else {\r\n              localStorage.setItem(\"activeItem\", \"surveyor\");\r\n              this.props.history.push(`/surveyor`);\r\n            }\r\n          } else {\r\n            this.setState({ loading: false });\r\n            this.setState({ message: false });\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    localStorage.setItem(\"activeItem\", \"login\");\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Segment>\r\n        <Segment basic>\r\n          <Header size=\"large\">Login</Header>\r\n        </Segment>\r\n\r\n        <Segment>\r\n          {/* Error message */}\r\n          <Message\r\n            negative\r\n            header=\"Error\"\r\n            content=\"Invalid password or username\"\r\n            hidden={this.state.message}\r\n          />\r\n\r\n          {/* Loading */}\r\n          <Dimmer active={this.state.loading} inverted>\r\n            <Loader>Loading</Loader>\r\n          </Dimmer>\r\n\r\n          {/* Form login */}\r\n          <Form>\r\n            <Form.Field>\r\n              <label>Username</label>\r\n              <Input\r\n                onChange={this.onChange}\r\n                value={this.state.name}\r\n                placeholder=\"Username\"\r\n                name=\"username\"\r\n                type=\"text\"\r\n                fluid\r\n                required\r\n              />\r\n            </Form.Field>\r\n            <Form.Field>\r\n              <label>Password</label>\r\n              <Input\r\n                onChange={this.onChange}\r\n                value={this.state.password}\r\n                placeholder=\"Password\"\r\n                name=\"password\"\r\n                type=\"password\"\r\n                fluid\r\n                required\r\n              />\r\n            </Form.Field>\r\n            <Button type=\"submit\" onClick={this.onSubmit}>\r\n              Login\r\n            </Button>\r\n          </Form>\r\n        </Segment>\r\n      </Segment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Input,\r\n  Form,\r\n  Button,\r\n  Segment,\r\n  Header,\r\n  Dimmer,\r\n  Loader,\r\n  Message,\r\n} from \"semantic-ui-react\";\r\n\r\n// POST request function\r\nimport { register } from \"./UserFunctions\";\r\n\r\nclass Register extends Component {\r\n  state = {\r\n    role_id: 1,\r\n    name: \"\",\r\n    username: \"\",\r\n    password: \"\",\r\n    loading: false,\r\n    message: true,\r\n  };\r\n\r\n  // Set state when input change\r\n  onChange = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  // Button submit\r\n  onSubmit = (e) => {\r\n    this.setState({ loading: true });\r\n    this.setState({ message: true });\r\n    // Check input\r\n    if (this.state.name !== \"\") {\r\n      const user = {\r\n        role_id: this.state.role_id,\r\n        name: this.state.name,\r\n        username: this.state.username,\r\n        password: this.state.password,\r\n      };\r\n\r\n      // Call POST request for login\r\n      register(user)\r\n        .then((res) => {\r\n          if (res !== \"error\") {\r\n            // Redirect to admin or login page\r\n            localStorage.setItem(\"activeItem\", \"login\");\r\n            this.props.history.push(`/login`);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    localStorage.setItem(\"activeItem\", \"register\");\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Segment>\r\n        <Segment basic>\r\n          <Header size=\"large\">Register</Header>\r\n        </Segment>\r\n\r\n        <Segment>\r\n          {/* Error message */}\r\n          <Message\r\n            negative\r\n            header=\"Error\"\r\n            content=\"Invalid password or username\"\r\n            hidden={this.state.message}\r\n          />\r\n\r\n          {/* Loading */}\r\n          <Dimmer active={this.state.loading} inverted>\r\n            <Loader>Loading</Loader>\r\n          </Dimmer>\r\n\r\n          {/* Form login */}\r\n          <Form>\r\n            <Form.Field>\r\n              <label>Role</label>\r\n              <Input\r\n                onChange={this.onChange}\r\n                value={this.state.role_id}\r\n                placeholder=\"Role\"\r\n                name=\"role_id\"\r\n                type=\"text\"\r\n                fluid\r\n                required\r\n              />\r\n            </Form.Field>\r\n            <Form.Field>\r\n              <label>Name</label>\r\n              <Input\r\n                onChange={this.onChange}\r\n                value={this.state.name}\r\n                placeholder=\"Name\"\r\n                name=\"name\"\r\n                type=\"text\"\r\n                fluid\r\n                required\r\n              />\r\n            </Form.Field>\r\n            <Form.Field>\r\n              <label>Username</label>\r\n              <Input\r\n                onChange={this.onChange}\r\n                value={this.state.username}\r\n                placeholder=\"Username\"\r\n                name=\"username\"\r\n                type=\"text\"\r\n                fluid\r\n                required\r\n              />\r\n            </Form.Field>\r\n            <Form.Field>\r\n              <label>Password</label>\r\n              <Input\r\n                onChange={this.onChange}\r\n                value={this.state.password}\r\n                placeholder=\"Password\"\r\n                name=\"password\"\r\n                type=\"password\"\r\n                fluid\r\n                required\r\n              />\r\n            </Form.Field>\r\n            <Button type=\"submit\" onClick={this.onSubmit}>\r\n              Register\r\n            </Button>\r\n          </Form>\r\n        </Segment>\r\n      </Segment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Register;\r\n","import React, { Component } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { Grid } from \"semantic-ui-react\";\n\n// Components\nimport Navbar from \"./components/Navbar\";\nimport Commodities from \"./components/Commodities\";\nimport AdminCommodities from \"./components/AdminCommodities\";\nimport SurveyorCommodities from \"./components/SurveyorCommodities\";\nimport Login from \"./components/Login\";\nimport Register from \"./components/Register\";\n\nclass App extends Component {\n  state = {};\n\n  render() {\n    return (\n      <div>\n        <Grid columns={3}>\n          <Grid.Row stretched>\n            <Grid.Column width=\"2\" />\n            <Grid.Column width=\"12\">\n              <Route path=\"/*\" component={Navbar} />\n              <Route exact path=\"/\" component={Commodities} />\n              <Route path=\"/home\" component={Commodities} />\n              <Route path=\"/admin\" component={AdminCommodities} />\n              <Route path=\"/surveyor\" component={SurveyorCommodities} />\n              <Route path=\"/login\" component={Login} />\n              <Route path=\"/register\" component={Register} />\n            </Grid.Column>\n            <Grid.Column width=\"2\" />\n          </Grid.Row>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}